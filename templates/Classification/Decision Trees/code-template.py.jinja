{{ header("Install required libraries")}}

# install required libraries
# pip install scikit-learn numpy matplotlib {% if data == "Benchmark data" %}pandas {% endif %}


{{ header("Import required libraries")}}

# importing required libraries
{% if data == "Benchmark data" %}
import pandas as pd
{% endif %}
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
{% if data == "Synthetic data" %}
from sklearn.datasets import make_classification
{% endif %}
{% if 'ROC Curve' in plots %}
from sklearn.metrics import plot_roc_curve
{% endif %}
{%  if 'Precision-Recall Curve' in plots %}
from sklearn.metrics import plot_precision_recall_curve
{% endif %}

{{ header("Hyperparameters") }}

# Set Hyperparameters
criterion = "{{ criterion.lower() }}"
max_depth = {{ max_depth }}
splitter = "{{ splitter.lower() }}"

{{ header("Data set") }}

{% if data == "Synthetic data" %}
# number of training points
n_samples = {{ n_samples }}
# number of features in data set
n_features = {{ n_features }}
# number of classes
n_classes = {{ n_classes }}

# Generate Synthetic Data
X, y = make_classification(n_samples=n_samples,
                            n_features=n_features,
                            n_classes=n_classes,
                            random_state=42)

# Splitting the data into training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                    test_size = 0.2,
                                    stratify=y,
                                    random_state=42)
{% else %}
# Loading {{dataset}} dataset
data = pd.read_csv("./data/classification/{{dataset}}.csv")
X = data.copy().drop('class', axis=1)
y = data['class']

# Splitting the data into training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                    test_size = 0.2,
                                    stratify=y,
                                    random_state=42)

{% endif %}

{{ header("Training") }}

# Train Random Forest Model
model = DecisionTreeClassifier(criterion=criterion,
                max_depth=max_depth, splitter=splitter)
model.fit(X_train, y_train)

{{ header("Testing") }}

# Testing model on train data

# get the prediction labels of the training data
cross_validation = cross_val_score(model, X_train, y_train, cv=5)

# evaluate and print the results
print("\nModel Performance on Training Data: {}".format(
    np.mean(cross_validation).round(2)))

# Testing model on test data

# get the prediction labels of the test data
y_pred = model.predict(X_test)
accuracy = model.score(X_test, y_test)

print("\nModel Performance on Test Data: {}".format(
    accuracy.round(2)))

# Compute the Precision
precision = precision_score(y_test, y_pred).round(2)
print("\nPrecision: {}".format(precision))

# Compute the Recall
recall = recall_score(y_test, y_pred).round(2)
print("\nRecall: {}".format(recall))

# Generate text reprot showing the main classification metrics
report = classification_report(y_test, y_pred)
print(report)

{% if visualization_status %}
{% if plots|length == 1 %}
{{ header("Visualization")}}

{%  if 'ROC Curve' in plots %}
plot_roc_curve(model, X_test, y_test)
plt.show()
{% endif %}
{%  if 'Precision-Recall Curve' in plots %}
plot_precision_recall_curve(model, X_test, y_test)
plt.show()
{% endif %}
{% endif %}
{% endif %}
{% if plots|length == 2 %}
{{ header("Visualization")}}

fig, axes = plt.subplots(figsize=(10,6), ncols=2, sharey=True)
ax1, ax2 = axes

plot_roc_curve(model, X_test, y_test, ax=ax1)
ax1.set_title("ROC Curve")
plot_precision_recall_curve(model, X_test, y_test, ax=ax2)
ax2.set_title("Precision Recall Curve")
plt.show()
{% endif %}
